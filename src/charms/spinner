#!/bin/bash

declare msg="\e[38;5;244m${@}\033[0m"
declare inputCommandCancelled=true
declare inputCommandExitCode

function makeCursorVisible() {
  tput cnorm
}

function printEndMessage() {
  ${inputCommandCancelled} && \
    printf "\r\e[38;5;3m⚠\033[0m ${msg}" && \
    return 0

  (( ${inputCommandExitCode} )) && \
    printf "\r\e[38;5;1m✘\033[0m ${msg}\n" && \
    return 0

  printf "\r\e[38;5;2m✔\033[0m ${msg}\n"
}

function handleShutdown() {
  printEndMessage
  makeCursorVisible
}

trap handleShutdown EXIT
# trap shutdown as soon as it mets all
# the requirements to declare handler

function makeCursorInvisible() {
  tput civis
}

function printMessageWithMarginForSpinner() {
  printf "  ${msg}"
}

declare inputCommandPid

function spinUntilFinish() {
  local spinnerChars=(⣾ ⣽ ⣻ ⢿ ⡿ ⣟ ⣯ ⣷)
  local spinLenMinusOne="$(( ${#spinnerChars[@]} - 1))"

  local i=0
  while kill -0 $inputCommandPid 2>/dev/null; do
    printf "\r${spinnerChars[$i]}"
    sleep .1

    [[ "$i" = "$spinLenMinusOne" ]] && i=0 || : $((i++))
  done
}

# Execute the input command in the background in a subshell
($@) &
inputCommandPid=$!

makeCursorInvisible
printMessageWithMarginForSpinner
spinUntilFinish

wait $inputCommandPid
inputCommandExitCode=$?
inputCommandCancelled=false

exit $inputCommandExitCode
